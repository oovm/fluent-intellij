{
    parserClass = "com.github.projectfluent.language.parser.FluentParser"
    parserUtilClass = "com.github.projectfluent.language.psi.FluentParserExtension"

    extends = "com.github.projectfluent.language.psi.FluentElement"

    psiClassPrefix = "Fluent"
    psiImplClassSuffix = "Node"
    psiPackage = "com.github.projectfluent.language.psi"
    psiImplPackage = "com.github.projectfluent.language.psi_node"

    elementTypeHolderClass = "com.github.projectfluent.language.psi.FluentTypes"
    elementTypeClass = "com.github.projectfluent.language.psi.FluentElementType"
    tokenTypeClass = "com.github.projectfluent.language.psi.FluentTokenType"

    psiImplUtilClass = "com.github.projectfluent.language.psi_node.FluentPsiExtension"

    tokens = [
        // comment
        COMMENT_DOCUMENT = "Comment Document"
        COMMENT = "Comment"
        COMMENT_BLOCK = "Comment Block"

        // literal
        URL = "Url"
        SYMBOL = "Symbol"
        STRING_QUOTE = "String Quote"
        STRING_CHAR = "String Character"
        STRING_ESCAPE = "String Escaped"

        BYTE = 'regexp:(0[bBoOxXfF][0-9A-Fa-f][0-9A-Fa-f_]*)'
        INTEGER = 'regexp:(0|[1-9][0-9_]*)'
        DECIMAL = 'Decimal'
        SIGN = 'regexp:[+-]'
        TEXT_CHAR="Text Character"
        CRLF = "Newline"

        PARENTHESIS_L = '('
        PARENTHESIS_R = ')'
        BRACKET_L = '['
        BRACKET_R = ']'
        BRACE_L = '{'
        BRACE_R = '}'
        ANGLE_L = '<'
        ANGLE_R = '>'
        ACCENT = '^'
        EQ = '='
        COLON = ':'
        SEMICOLON = ';'
        COMMA = ','
        DOLLAR = '$'
        DOT = '.'
        STAR = '*'
        AT = '@'
//      SPACE='regexp:\s+'
//      ANY = 'regexp:.'
    ]
}

// https://github.com/projectfluent/fluent/blob/master/spec/fluent.ebnf
Fluent ::= entry*
/* Entries are the main building blocks of Fluent. They define translations and
 * contextual and semantic information about the translations. During the AST
 * construction, adjacent comment lines of the same comment type (defined by
 * the number of #) are joined together. Single-# comments directly preceding
 * Messages and Terms are attached to the Message or Term and are not
 * standalone Entries. */
/* Entries are the main building blocks of Fluent. They define translations and
 * contextual and semantic information about the translations. During the AST
 * construction, adjacent comment lines of the same comment type (defined by
 * the number of #) are joined together. Single-# comments directly preceding
 * Messages and Terms are attached to the Message or Term and are not
 * standalone Entries. */
private entry ::=
    message
    | term
    | COMMENT_LINE
message ::= Identifier EQ ((pattern attribute*) | (attribute+))
term    ::= "-" Identifier EQ pattern attribute*
/* Attributes of Messages and Terms. */
attribute  ::= "." Identifier EQ pattern
/* Patterns are values of Messages, Terms, Attributes and Variants. */
pattern    ::= pattern_element+
/* TextElement and Placeable can occur inline or as block.
 * Text needs to be indented and start with a non-special character.
 * Placeables can start at the beginning of the line or be indented.
 * Adjacent TextElements are joined in AST creation. */
private pattern_element ::=
    inline_text
//    | block_text
//    | inline_placeable
//    | block_placeable
inline_text         ::= TEXT_LINE
block_text          ::= BLANK_BLOCK BLANK_INLINE INDENT [inline_text]
inline_placeable    ::= "{" [BLANK] (SelectExpression | InlineExpression) [BLANK] "}"
block_placeable     ::= BLANK_BLOCK [BLANK_INLINE] inline_placeable

/* Rules for validating expressions in Placeables and as selectors of
 * SelectExpressions are documented in spec/valid.md and enforced in
 * syntax/abstract.js. */
InlineExpression    ::= StringLiteral
                      | NumberLiteral
                      | FunctionReference
                      | MessageReference
                      | TermReference
                      | VariableReference
                      | inline_placeable

/* Literals */
StringLiteral       ::= STRING_QUOTE STRING_ESCAPE STRING_CHAR STRING_QUOTE
NumberLiteral       ::= ["-"] DIGITS ["." DIGITS]

/* Inline Expressions */
FunctionReference   ::= Identifier CallArguments
MessageReference    ::= Identifier [AttributeAccessor]
TermReference       ::= "-" Identifier [AttributeAccessor] [CallArguments]
VariableReference   ::= "$" Identifier
AttributeAccessor   ::= "." Identifier
CallArguments       ::= [BLANK] "(" [BLANK] argument_list [BLANK] ")"
argument_list       ::= (Argument [BLANK] "," [BLANK])* [Argument]
Argument            ::= NamedArgument
                      | InlineExpression
NamedArgument       ::= Identifier [BLANK] ":" [BLANK] (StringLiteral | NumberLiteral)

/* Block Expressions */
SelectExpression    ::= InlineExpression [BLANK] "->" [BLANK_INLINE] variant_list
variant_list        ::= Variant* DefaultVariant Variant* CRLF
Variant             ::= CRLF [BLANK] VariantKey [BLANK_INLINE] pattern
DefaultVariant      ::= CRLF [BLANK] "*" VariantKey [BLANK_INLINE] pattern
VariantKey          ::= "[" [BLANK] (NumberLiteral | Identifier) [BLANK] "]"

/* Identifier */
Identifier          ::= SYMBOL

BLANK_BLOCK ::= ([BLANK_INLINE] CRLF)+
BLANK       ::= (BLANK_INLINE | CRLF)+