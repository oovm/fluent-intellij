{
    parserClass = "com.github.projectfluent.language.parser.FluentParser"
    parserUtilClass = "com.github.projectfluent.language.psi.FluentParserExtension"

    extends = "com.github.projectfluent.language.psi.FluentElement"

    psiClassPrefix = "Fluent"
    psiImplClassSuffix = "Node"
    psiPackage = "com.github.projectfluent.language.psi"
    psiImplPackage = "com.github.projectfluent.language.psi_node"

    elementTypeHolderClass = "com.github.projectfluent.language.psi.FluentTypes"
    elementTypeClass = "com.github.projectfluent.language.psi.FluentElementType"
    tokenTypeClass = "com.github.projectfluent.language.psi.FluentTokenType"

    psiImplUtilClass = "com.github.projectfluent.language.psi_node.FluentPsiExtension"

    tokens = [
        // comment
        COMMENT_DOCUMENT = "Comment Document"
        COMMENT = "Comment"
        COMMENT_BLOCK = "Comment Block"

        // literal
        URL = "Url"
        SYMBOL = "Symbol"
        STRING_QUOTE = "String Quote"
        STRING_CHAR = "String Character"
        STRING_ESCAPE = "String Escaped"
        SELECTION_LINE = "SELECTION_LINE"

        PARENTHESIS_L = '('
        PARENTHESIS_R = ')'
        BRACKET_L = '['
        BRACKET_R = ']'
        BRACE_L = '{'
        BRACE_R = '}'
        ANGLE_L = '<'
        ANGLE_R = '>'
        ACCENT = '^'
        EQ = '='
        COLON = ':'
        SEMICOLON = ';'
        COMMA = ','
        DOLLAR = '$'
        DOT = '.'
        STAR = '*'
        AT = '@'
        TO = "->"
        HYPHEN = "-"
//      SPACE='regexp:\s+'
//      ANY = 'regexp:.'
    ]
}

// https://github.com/projectfluent/fluent/blob/master/spec/fluent.ebnf
Fluent ::= Entry*
private Entry ::=
    Message
  | Term
  | Attribute
  | COMMENT_LINE
Message ::= MessageID EQ ((Pattern Attribute*) | Attribute+) {
    mixin = "com.github.projectfluent.language.mixin.MixinMessage"
}
Term ::= TermID EQ Pattern Attribute* {
    mixin = "com.github.projectfluent.language.mixin.MixinTerm"
}
/* Attributes of Messages and Terms. */
Attribute ::= AttributeID EQ Pattern {
    mixin = "com.github.projectfluent.language.mixin.MixinAttribute"
}
/* Patterns are values of Messages, Terms, Attributes and Variants. */
Pattern ::= pattern_element+
/* TextElement and Placeable can occur inline or as block.
 * Text needs to be indented and start with a non-special character.
 * Placeables can start at the beginning of the line or be indented.
 * Adjacent TextElements are joined in AST creation. */
private pattern_element ::=
    InlineText
  | BlockText
  | InlinePlaceable
//    | block_placeable
InlineText        ::= TEXT_LINE | SELECTION_LINE;
BlockText         ::= InlineText+;
InlinePlaceable   ::= BRACE_L (SelectExpression | expression) BRACE_R
block_placeable   ::= BLANK_BLOCK  InlinePlaceable

/* Rules for validating expressions in Placeables and as selectors of
 * SelectExpressions are documented in spec/valid.md and enforced in
 * syntax/abstract.js. */
private expression    ::=
    StringLiteral
  | NumberLiteral
  | FunctionReference
  | MessageReference
  | TermReference
  | VariableID
  | InlinePlaceable

/* Inline Expressions */
FunctionReference   ::= FunctionID CallArguments
MessageReference    ::= MessageID [AttributeID]
TermReference       ::= TermID [CallArguments]
CallArguments       ::= PARENTHESIS_L (Argument COMMA)* [Argument] PARENTHESIS_R
Argument            ::= NamedArgument | expression
NamedArgument       ::= MessageID COLON (StringLiteral | NumberLiteral)

/* Block Expressions */
SelectExpression    ::= expression TO (Variant|DefaultVariant)+
Variant             ::= VariantKey Pattern
DefaultVariant      ::= STAR VariantKey Pattern
VariantKey          ::= BRACKET_L (NumberLiteral | MessageID) BRACKET_R

/* Identifier */
MessageID           ::= SYMBOL;
TermID              ::= HYPHEN SYMBOL;
AttributeID         ::= DOT SYMBOL;
VariableID          ::= DOLLAR SYMBOL;
FunctionID          ::= SYMBOL;
/* Literals */
StringLiteral       ::= STRING_QUOTE (STRING_ESCAPE|STRING_CHAR)* STRING_QUOTE
NumberLiteral       ::= INTEGER | DECIMAL