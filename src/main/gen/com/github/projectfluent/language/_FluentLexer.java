/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.projectfluent.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.projectfluent.language.psi.FluentTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Fluent.flex</tt>
 */
public class _FluentLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int StringQuote = 2;
  public static final int TextContext = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15216 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\21\1\23\1\21\14\24\1\25\50\24\1\26\2\24\1\27\1\30\1\31\1\32"+
    "\25\24\1\33\20\21\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\21\1\24\1\56\1\57\5\21\2\24\1\60"+
    "\7\21\1\24\1\61\20\21\1\24\1\62\1\21\1\63\13\24\1\64\1\24\1\65\22\21\1\66"+
    "\5\21\1\67\11\21\1\70\1\71\1\72\1\73\1\21\1\74\2\21\1\75\3\21\1\76\2\21\1"+
    "\77\10\21\123\24\1\100\7\24\1\101\1\102\12\24\1\103\24\21\1\24\1\104\u0582"+
    "\21\1\105\u017f\21");

  /* The ZZ_CMAP_Y table has 4480 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\7\1\13\1\14\1\15\3\0"+
    "\1\16\1\17\1\20\1\17\2\21\1\22\3\21\1\22\71\21\1\23\1\21\1\24\1\0\1\25\1\26"+
    "\2\0\16\21\1\27\1\30\1\31\1\32\2\21\1\33\11\21\1\34\21\21\1\33\1\35\24\21"+
    "\1\36\3\21\1\22\1\37\1\36\4\21\1\0\1\36\4\21\1\34\1\40\1\0\3\21\2\41\3\0\1"+
    "\21\1\41\11\21\1\23\14\21\1\42\1\43\1\21\1\44\1\21\1\43\2\0\7\21\1\45\14\21"+
    "\1\24\1\0\6\21\1\46\1\17\5\21\1\46\2\0\3\21\1\47\10\0\2\21\1\27\1\46\2\0\1"+
    "\50\1\21\1\33\17\21\1\51\1\21\1\36\1\21\1\42\1\43\1\52\2\21\1\44\1\53\1\54"+
    "\1\43\1\55\1\56\1\57\1\51\1\21\1\24\1\0\1\60\1\61\1\52\2\21\1\44\1\62\1\63"+
    "\1\61\1\64\1\37\1\65\1\31\1\21\1\46\1\0\1\60\1\34\1\33\2\21\1\44\1\66\1\54"+
    "\1\34\1\67\1\70\1\0\1\51\1\21\1\0\1\37\1\60\1\43\1\52\2\21\1\44\1\66\1\54"+
    "\1\43\1\64\1\31\1\57\1\51\1\21\1\37\1\0\1\71\1\72\1\73\1\74\1\75\1\72\1\21"+
    "\1\23\1\72\1\73\1\76\1\0\1\31\1\21\2\0\1\42\1\27\1\44\2\21\1\44\1\21\1\77"+
    "\1\27\1\73\1\100\1\41\1\51\1\21\2\0\1\42\1\27\1\44\2\21\1\44\1\42\1\54\1\27"+
    "\1\73\1\100\1\101\1\51\1\21\1\102\1\0\1\60\1\27\1\44\4\21\1\45\1\27\1\103"+
    "\1\50\1\56\1\51\1\21\1\0\1\35\1\71\1\21\1\22\1\35\2\21\1\33\1\104\1\22\1\105"+
    "\1\106\1\21\1\31\1\21\1\107\1\0\1\36\6\21\1\41\1\21\1\22\1\21\1\24\4\0\1\110"+
    "\1\111\1\50\1\36\1\112\1\71\1\21\1\67\1\106\1\46\1\21\1\54\4\0\1\70\2\0\1"+
    "\24\1\21\1\24\1\20\1\113\1\21\1\36\3\21\1\25\1\36\1\21\1\27\2\21\1\36\3\21"+
    "\1\25\1\101\7\0\11\21\1\24\11\21\1\46\4\21\1\34\1\114\5\21\1\115\51\21\1\73"+
    "\1\22\1\73\5\21\1\73\4\21\1\73\1\22\1\73\1\21\1\22\7\21\1\73\10\21\1\45\1"+
    "\0\1\36\1\24\1\0\2\21\2\0\12\21\2\46\1\36\114\21\1\43\2\21\1\116\2\21\1\41"+
    "\11\21\1\72\1\21\1\70\1\21\1\27\1\25\1\0\2\21\1\25\1\0\2\21\1\47\1\0\1\21"+
    "\1\27\1\117\1\0\12\21\1\120\1\121\1\21\1\24\3\0\1\122\1\21\1\24\13\21\1\0"+
    "\5\21\1\41\10\21\1\46\1\0\3\21\1\22\1\21\1\47\1\21\1\47\1\31\4\21\1\46\1\25"+
    "\1\0\5\21\1\47\3\21\1\24\1\21\1\41\4\0\3\21\1\47\7\21\1\22\3\21\1\43\1\21"+
    "\1\24\1\21\1\24\1\56\1\0\1\21\1\46\10\0\11\21\1\47\1\21\1\24\1\0\1\123\1\47"+
    "\1\0\16\21\1\47\1\0\7\21\1\0\1\21\1\77\5\21\1\46\1\21\1\70\10\0\1\115\3\21"+
    "\1\22\1\24\36\21\1\46\1\123\42\21\2\46\4\21\2\46\1\21\1\124\3\21\1\46\6\21"+
    "\1\27\1\106\1\125\1\25\1\51\1\47\1\21\1\25\1\125\1\25\1\126\1\127\3\0\1\130"+
    "\1\0\1\56\1\70\1\0\1\131\1\132\2\0\1\37\1\56\2\0\1\21\1\25\6\0\1\21\1\25\1"+
    "\133\1\21\1\70\1\0\1\105\1\35\1\104\1\46\1\26\1\44\1\21\1\54\1\134\1\135\2"+
    "\0\5\21\1\70\116\0\5\21\1\22\5\21\1\22\20\21\1\25\1\123\1\47\1\0\4\21\1\34"+
    "\1\114\7\21\1\56\1\0\1\56\2\21\1\22\1\0\10\22\4\21\1\136\3\0\1\36\1\21\1\137"+
    "\1\25\1\36\11\21\1\22\1\140\1\36\12\21\1\115\1\134\4\21\1\46\1\36\12\21\1"+
    "\22\2\0\3\21\1\41\6\0\170\21\1\46\11\0\72\21\1\46\5\0\21\21\1\25\10\0\5\21"+
    "\1\46\41\21\1\25\3\21\1\47\2\0\6\21\1\50\1\34\16\21\1\24\3\0\1\56\1\21\1\35"+
    "\14\21\1\52\3\21\1\22\1\21\7\0\1\56\6\21\3\0\6\21\1\47\1\0\10\21\1\46\1\0"+
    "\1\21\1\24\3\21\1\141\5\21\1\46\4\21\1\47\1\0\3\21\1\25\10\21\1\70\1\56\1"+
    "\21\1\24\3\21\1\22\6\21\1\22\1\0\1\21\1\46\1\21\1\24\2\21\1\22\1\35\10\21"+
    "\1\41\2\0\1\122\2\21\1\142\1\0\3\143\1\0\2\22\5\21\1\115\1\46\1\0\17\21\1"+
    "\144\1\21\1\24\64\21\1\47\1\0\2\21\1\22\1\123\5\21\1\47\40\0\55\21\1\46\15"+
    "\21\1\24\4\0\1\22\1\0\1\123\1\134\1\21\1\44\1\22\1\106\1\145\15\21\1\24\3"+
    "\0\1\123\20\21\1\46\1\50\32\21\1\46\2\0\10\21\1\35\6\21\5\0\1\21\1\24\2\21"+
    "\2\0\2\21\1\75\2\0\1\134\4\0\1\146\1\124\17\21\1\25\2\0\1\21\1\24\1\36\2\21"+
    "\1\61\1\36\2\21\1\41\1\31\12\21\1\22\3\35\1\147\4\0\1\21\1\42\2\21\1\22\2"+
    "\21\1\150\1\21\1\46\1\21\1\46\4\0\17\21\1\41\10\0\6\21\1\25\20\0\1\114\20"+
    "\0\3\21\1\25\6\21\1\70\1\0\1\70\3\0\4\21\2\0\3\21\1\41\5\21\1\41\3\21\1\46"+
    "\4\21\1\47\1\21\1\137\5\0\23\21\1\46\1\21\1\24\4\21\1\47\4\21\1\47\5\21\1"+
    "\0\6\21\1\47\23\0\46\21\1\22\1\0\2\21\1\46\1\0\1\21\23\0\1\46\1\44\4\21\1"+
    "\34\1\151\2\21\1\46\1\0\2\21\1\22\1\0\3\21\1\22\10\0\2\21\1\144\1\0\2\21\1"+
    "\46\1\0\3\21\1\24\10\0\7\21\1\31\10\0\1\152\1\50\1\42\1\36\2\21\1\47\1\61"+
    "\4\0\3\21\1\25\3\21\1\25\4\0\1\21\1\36\2\21\1\22\3\0\6\21\1\46\1\0\2\21\1"+
    "\46\1\0\2\21\1\41\1\0\2\21\1\24\15\0\11\21\1\70\6\0\6\21\1\41\1\0\6\21\1\41"+
    "\41\0\10\21\1\22\3\0\1\31\1\21\1\0\1\56\7\21\1\41\2\0\3\21\1\70\1\21\1\24"+
    "\6\21\1\27\1\21\2\0\4\21\1\153\1\0\10\21\1\25\1\147\1\21\1\154\4\0\2\21\1"+
    "\33\4\21\1\101\10\0\1\22\1\155\1\21\1\34\1\21\1\70\7\21\1\41\1\21\1\24\1\42"+
    "\1\43\1\52\2\21\1\44\1\66\1\54\1\43\1\64\1\76\1\134\1\51\2\25\21\0\11\21\1"+
    "\41\1\21\1\24\4\0\10\21\1\34\1\0\1\21\1\24\24\0\6\21\1\46\1\21\1\70\2\0\1"+
    "\46\4\0\10\21\1\156\1\0\1\21\1\24\4\0\7\21\1\0\1\21\1\24\6\0\3\21\1\77\1\21"+
    "\1\47\1\21\1\24\54\0\11\21\1\24\1\0\1\56\70\0\7\21\1\70\40\0\1\21\1\44\4\21"+
    "\1\22\1\21\1\70\1\0\1\21\1\24\2\0\1\35\3\21\1\35\2\21\1\36\1\22\51\0\63\21"+
    "\1\24\14\0\15\21\1\22\2\0\30\21\1\47\27\0\5\21\1\22\72\0\10\21\1\22\67\0\7"+
    "\21\1\70\3\21\1\22\1\21\1\24\14\0\3\21\1\46\1\25\1\0\6\21\1\22\1\0\1\47\1"+
    "\0\1\21\1\24\1\123\2\21\1\134\2\21\56\0\10\21\1\25\1\0\5\21\1\22\1\0\1\56"+
    "\2\21\10\0\1\70\3\0\75\21\1\25\2\0\36\21\1\41\41\0\1\24\77\0\15\21\1\41\1"+
    "\21\1\25\1\21\1\70\1\21\1\157\130\0\1\134\1\77\1\41\1\123\1\45\1\47\3\0\1"+
    "\160\22\0\1\147\67\0\12\21\1\27\10\21\1\27\1\161\1\162\1\21\1\163\1\42\7\21"+
    "\1\34\1\45\2\27\3\21\1\164\1\106\1\35\1\44\51\21\1\46\3\21\1\44\2\21\1\115"+
    "\3\21\1\115\2\21\1\27\3\21\1\27\2\21\1\22\3\21\1\22\3\21\1\44\3\21\1\44\2"+
    "\21\1\115\1\51\14\21\1\22\1\123\5\21\1\25\1\114\1\0\1\131\2\0\1\123\1\36\1"+
    "\21\52\0\1\22\2\21\1\52\1\145\1\41\72\0\30\21\1\25\1\0\1\22\5\0\11\21\1\41"+
    "\1\21\1\24\24\0\1\42\3\21\1\110\1\36\1\115\1\165\1\105\1\166\1\110\1\124\1"+
    "\110\2\115\1\65\1\21\1\33\1\21\1\47\1\60\1\33\1\21\1\47\50\0\32\21\1\22\5"+
    "\0\106\21\1\25\1\0\33\21\1\46\120\21\1\24\53\0\3\21\1\46\134\0\36\21\2\0");

  /* The ZZ_CMAP_A table has 952 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\2\1\1\3\2\0\1\4\1\0\1\25\1\6\1\44\1\0\1\12\1\0\1\31\1\32\1\7"+
    "\1\24\1\43\1\14\1\22\1\5\1\15\11\10\1\11\1\42\1\37\1\46\1\40\1\12\1\45\1\17"+
    "\1\20\2\17\1\23\1\20\10\13\1\16\5\13\1\27\2\13\1\16\2\13\1\33\1\26\1\34\1"+
    "\41\1\21\1\0\1\17\1\20\2\17\1\23\1\20\6\13\1\30\2\13\1\16\2\13\1\35\1\0\1"+
    "\36\7\0\1\1\2\0\1\4\11\0\1\12\12\0\1\12\1\0\20\12\1\0\2\12\4\0\4\12\6\0\5"+
    "\12\7\0\1\12\1\0\1\12\1\0\5\12\1\0\2\12\3\0\3\12\1\0\1\12\6\0\5\12\1\0\1\12"+
    "\1\0\4\12\1\0\13\12\1\0\1\12\2\0\6\12\1\0\7\12\1\0\1\12\7\0\2\12\1\0\2\12"+
    "\1\0\4\12\5\0\4\12\1\0\10\12\2\0\2\12\1\0\11\12\2\0\11\12\2\0\4\12\10\0\10"+
    "\12\2\0\3\12\2\0\6\12\1\0\1\12\3\0\4\12\2\0\5\12\2\0\4\12\10\0\1\12\4\0\2"+
    "\12\1\0\1\12\1\0\3\12\1\0\6\12\4\0\2\12\1\0\2\12\1\0\2\12\1\0\2\12\2\0\1\12"+
    "\1\0\3\12\2\0\3\12\3\0\4\12\1\0\1\12\1\0\1\12\1\0\2\12\1\0\5\12\1\0\3\12\2"+
    "\0\1\12\11\0\2\12\1\0\6\12\3\0\3\12\1\0\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3"+
    "\0\2\12\3\0\1\12\6\0\3\12\3\0\3\12\5\0\2\12\7\0\1\12\2\0\2\12\5\0\1\12\1\0"+
    "\5\12\1\0\4\12\1\0\1\12\4\0\1\12\4\0\6\12\1\0\1\12\3\0\2\12\5\0\2\12\1\0\1"+
    "\12\2\0\2\12\1\0\1\12\2\0\1\12\3\0\3\12\1\0\1\12\1\0\1\12\1\0\1\12\4\0\2\12"+
    "\5\0\1\12\2\0\3\12\1\0\4\12\1\4\10\12\1\0\2\12\4\0\4\12\3\0\1\12\4\0\2\12"+
    "\5\0\3\12\5\0\5\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\2\0\3\12\1\0\2\12\13"+
    "\4\5\0\2\1\5\0\1\4\4\0\1\12\12\0\1\4\1\0\1\12\3\0\3\12\5\0\5\12\4\0\1\12\1"+
    "\0\1\4\4\0\3\12\1\0\5\12\3\0\2\12\2\0\3\12\3\0\1\12\1\0\1\12\4\0\5\12\2\0"+
    "\6\12\1\0\3\12\1\0\2\12\2\0\2\12\1\0\2\12\1\0\2\12\1\0\1\12\1\0\1\12\3\0\1"+
    "\12\2\0\3\12\3\0\3\12\1\0\2\12\1\0\2\12\3\0\1\12\2\0\5\12\1\0\2\12\1\0\4\12"+
    "\2\0\1\12\1\0\3\12\1\0\1\12\3\0\1\12\1\0\4\12\1\0\2\12\3\0\1\12\3\0\2\12\3"+
    "\0\2\12\3\0\4\12\4\0\1\12\2\0\2\12\2\0\4\12\1\0\4\12\1\0\1\12\1\0\5\12\1\0"+
    "\4\12\2\0\1\12\1\0\1\12\5\0\1\12\1\0\1\12\1\0\3\12");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\5\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\31\3\33\4\0"+
    "\1\5\1\34\1\7\2\0\1\34\1\35\4\0\1\36"+
    "\3\0\1\37\3\0\1\40\1\0\1\37\1\34\1\0"+
    "\1\41\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[65];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\165"+
    "\0\u0111\0\165\0\u0138\0\165\0\u015f\0\u0186\0\165\0\165"+
    "\0\165\0\165\0\165\0\165\0\165\0\165\0\165\0\165"+
    "\0\165\0\165\0\165\0\165\0\165\0\165\0\165\0\u01ad"+
    "\0\u01d4\0\u01fb\0\u0222\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5"+
    "\0\u030c\0\u0333\0\u035a\0\u0381\0\u03a8\0\165\0\u03cf\0\u03f6"+
    "\0\u01d4\0\u01fb\0\u041d\0\u0444\0\u046b\0\u0492\0\u04b9\0\u04e0"+
    "\0\u0507\0\u052e\0\165\0\u0555\0\u057c\0\u04e0\0\u05a3\0\u0555"+
    "\0\u05ca";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[65];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\4\5\1\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\13\1\14\1\15\3\13\1\4\1\16\1\13\1\14"+
    "\1\17\1\4\2\13\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\25\36\1\37\1\40\20\36\1\41\2\42\1\43"+
    "\21\41\2\42\20\41\50\0\4\5\47\0\1\44\1\0"+
    "\1\45\37\0\2\7\2\0\43\7\10\0\1\11\1\46"+
    "\1\0\1\47\1\0\1\11\3\47\1\50\1\51\1\47"+
    "\3\0\2\47\26\0\1\13\1\46\1\0\1\13\1\52"+
    "\4\13\1\52\1\0\1\13\3\0\2\13\26\0\1\53"+
    "\1\46\1\0\1\47\1\0\1\53\1\54\1\47\1\54"+
    "\1\0\1\51\1\47\3\0\2\47\26\0\1\55\4\0"+
    "\1\55\31\0\25\56\2\0\1\57\1\60\16\56\47\41"+
    "\51\61\1\62\44\61\5\0\1\63\41\0\7\45\1\64"+
    "\37\45\5\0\1\65\51\0\1\47\1\46\1\0\1\47"+
    "\1\0\4\47\2\0\1\47\3\0\2\47\26\0\1\50"+
    "\4\0\1\50\3\0\1\50\34\0\1\66\1\51\4\0"+
    "\1\51\41\0\1\52\2\0\7\52\1\0\1\52\3\0"+
    "\2\52\26\0\1\53\1\46\1\0\1\47\1\0\1\53"+
    "\3\47\1\0\1\51\1\47\3\0\2\47\26\0\1\67"+
    "\1\46\1\0\1\47\1\0\1\67\1\47\2\67\2\0"+
    "\1\67\3\0\2\47\26\0\1\55\4\0\1\55\5\0"+
    "\1\70\33\0\1\71\4\0\1\71\1\0\2\71\2\0"+
    "\1\71\33\0\1\72\4\0\1\72\1\0\2\72\2\0"+
    "\1\72\23\0\2\63\2\0\43\63\5\45\1\73\1\45"+
    "\1\64\37\45\5\0\1\74\50\0\1\70\47\0\1\67"+
    "\1\46\1\0\1\47\1\0\1\67\1\47\2\67\1\75"+
    "\1\0\1\67\3\0\2\47\26\0\1\76\4\0\1\76"+
    "\41\0\1\60\4\0\1\60\1\0\2\60\2\0\1\60"+
    "\33\0\1\77\4\0\1\77\1\0\2\77\2\0\1\77"+
    "\30\0\2\100\1\0\1\100\1\0\12\100\3\0\2\100"+
    "\26\0\1\75\4\0\1\75\1\0\3\75\1\0\1\75"+
    "\33\0\1\101\4\0\1\101\1\0\2\101\2\0\1\101"+
    "\33\0\1\56\4\0\1\56\1\0\2\56\2\0\1\56"+
    "\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1521];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\1\1\1\11\1\1\1\11"+
    "\2\1\21\11\4\1\4\0\3\1\2\0\1\1\1\11"+
    "\4\0\1\1\3\0\1\1\3\0\1\11\1\0\2\1"+
    "\1\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[65];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public _FluentLexer() {
	this((java.io.Reader)null);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _FluentLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 34: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 35: break;
          case 3: 
            { return COMMENT;
            } 
            // fall through
          case 36: break;
          case 4: 
            { return STAR;
            } 
            // fall through
          case 37: break;
          case 5: 
            { return INTEGER;
            } 
            // fall through
          case 38: break;
          case 6: 
            { return COLON;
            } 
            // fall through
          case 39: break;
          case 7: 
            { return SYMBOL;
            } 
            // fall through
          case 40: break;
          case 8: 
            { return SIGN;
            } 
            // fall through
          case 41: break;
          case 9: 
            { return DOT;
            } 
            // fall through
          case 42: break;
          case 10: 
            { yybegin(StringQuote);
    return STRING_QUOTE;
            } 
            // fall through
          case 43: break;
          case 11: 
            { return PARENTHESIS_L;
            } 
            // fall through
          case 44: break;
          case 12: 
            { return PARENTHESIS_R;
            } 
            // fall through
          case 45: break;
          case 13: 
            { return BRACKET_L;
            } 
            // fall through
          case 46: break;
          case 14: 
            { return BRACKET_R;
            } 
            // fall through
          case 47: break;
          case 15: 
            { return BRACE_L;
            } 
            // fall through
          case 48: break;
          case 16: 
            { return BRACE_R;
            } 
            // fall through
          case 49: break;
          case 17: 
            { return ANGLE_L;
            } 
            // fall through
          case 50: break;
          case 18: 
            { return ANGLE_R;
            } 
            // fall through
          case 51: break;
          case 19: 
            { return ACCENT;
            } 
            // fall through
          case 52: break;
          case 20: 
            { return SEMICOLON;
            } 
            // fall through
          case 53: break;
          case 21: 
            { return COMMA;
            } 
            // fall through
          case 54: break;
          case 22: 
            { return DOLLAR;
            } 
            // fall through
          case 55: break;
          case 23: 
            { return AT;
            } 
            // fall through
          case 56: break;
          case 24: 
            { yybegin(TextContext);
	return EQ;
            } 
            // fall through
          case 57: break;
          case 25: 
            { return STRING_CHAR;
            } 
            // fall through
          case 58: break;
          case 26: 
            { yybegin(YYINITIAL);
	return STRING_QUOTE;
            } 
            // fall through
          case 59: break;
          case 27: 
            { return TEXT_CHAR;
            } 
            // fall through
          case 60: break;
          case 28: 
            { return DECIMAL;
            } 
            // fall through
          case 61: break;
          case 29: 
            { return STRING_ESCAPE;
            } 
            // fall through
          case 62: break;
          case 30: 
            { return COMMENT_DOCUMENT;
            } 
            // fall through
          case 63: break;
          case 31: 
            { return BYTE;
            } 
            // fall through
          case 64: break;
          case 32: 
            { return COMMENT_BLOCK;
            } 
            // fall through
          case 65: break;
          case 33: 
            { return URL;
            } 
            // fall through
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
